---
const { command, className = "" } = Astro.props;
---

<div class="command-container">
  <pre
    class="bg-gray-800 text-green-400 p-3 rounded-lg font-mono text-sm overflow-x-auto border border-gray-600"><code>{command}</code></pre>
  <button
    class={`copy-command-btn inline-flex items-center px-3 py-2 text-xs bg-blue-600 hover:bg-blue-500 text-white rounded-md transition-colors mt-2 ${className}`}
    data-command={command}
    title="Copiar comando"
  >
    <svg
      class="w-3 h-3 mr-1"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
      ></path>
    </svg>
    Copiar
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const copyButtons = document.querySelectorAll(
      ".copy-command-btn"
    ) as NodeListOf<HTMLButtonElement>;

    copyButtons.forEach((button: HTMLButtonElement) => {
      button.addEventListener(
        "click",
        async function (this: HTMLButtonElement) {
          const command = this.dataset.command;

          if (!command) return;

          try {
            await navigator.clipboard.writeText(command);

            // Visual feedback
            const originalText = this.innerHTML;
            this.innerHTML = `
            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Copiado
          `;
            this.classList.remove("bg-blue-600", "hover:bg-blue-500");
            this.classList.add("bg-green-600");

            setTimeout(() => {
              this.innerHTML = originalText;
              this.classList.remove("bg-green-600");
              this.classList.add("bg-blue-600", "hover:bg-blue-500");
            }, 2000);
          } catch (err) {
            console.error("Error al copiar:", err);
            // Fallback para navegadores que no soportan clipboard API
            try {
              const textArea = document.createElement("textarea");
              textArea.value = command;
              textArea.style.position = "fixed";
              textArea.style.left = "-999999px";
              textArea.style.top = "-999999px";
              document.body.appendChild(textArea);
              textArea.focus();
              textArea.select();
              document.execCommand("copy");
              document.body.removeChild(textArea);

              // Visual feedback para fallback
              const originalText = this.innerHTML;
              this.innerHTML = `
              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Copiado
            `;
              this.classList.remove("bg-blue-600", "hover:bg-blue-500");
              this.classList.add("bg-green-600");

              setTimeout(() => {
                this.innerHTML = originalText;
                this.classList.remove("bg-green-600");
                this.classList.add("bg-blue-600", "hover:bg-blue-500");
              }, 2000);
            } catch (fallbackErr) {
              console.error("Error en fallback:", fallbackErr);
            }
          }
        }
      );
    });
  });
</script>
